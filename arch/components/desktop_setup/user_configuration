#!/usr/bin/env bash

# Configure user profile

# Setup logging

LOG_DIR="/root/thin_mint_logs"

[[ ! -d "$LOG_DIR" ]] && mkdir "$LOG_DIR"

exec 1> >(tee "$LOG_DIR/user_configuration_stdout.log")
exec 2> >(tee "$LOG_DIR/user_configuration_stderr.log")


[[ -z "${USER_PLAIN+x}" ]] && export USER_PLAIN="jared"
[[ -z "${PASSWORD_PLAIN+x}" ]] && export PASSWORD_PLAIN="password"
MINT_HOME="/home/$USER_PLAIN"

echo "[DEBUG] Set username is: $USER_PLAIN"
echo "[DEBUG] Set password is: $PASSWORD_PLAIN"

## "Exceptions" ##

function perm_err_() {
    >&2 echo "[ERROR] Run as root, stop."
    exit 1
}

function no_user_specified_() {
    >&2 echo "[ERROR] No user specified, stop"
    exit 1
}

function user_exists_() {
    >&2 echo "[WARNING] $USER_PLAIN is already a user, skipping this step"
}

function wrong_os_err_() {
    >&2 echo "[ERROR] Only supports Arch Linux, stop"
    exit 1
}

## Functions ##

function make_root() {
    # Create allow our user to be apart of the sudoers group

    local M_USER="$1"

    echo "[INFO] Enabling user with name of: \'$M_USER\' to be apart of the sudoers group"

    [[ -z "$@" ]] && no_user_specified_
    echo "$M_USER ALL=(ALL) ALL"  | tee -a /etc/sudoers
}

function password_manager() {
    # Obtain the root password for the default user
    
    PASSONE=""
    PASSTWO="empty_password_please_fill"

    while [[ -z "$PASSONE" || "$PASSONE" != "$PASSTWO" ]]; do
        PASSONE=$(dialog --stdout --passwordbox "Enter admin password" 0 0) || exit 1
        clear
        PASSTWO=$(dialog --stdout --passwordbox "Enter admin password again" 0 0) || exit 1
        clear
    done

    echo "$USER_PLAIN:$PASSONE" | chpasswd "$USER_PLAIN"
    echo "root:$PASSONE" | chpasswd root
    export PASSWORD_PLAIN="$PASSONE" # this will be used throughout the lifetime of the script
}

function create_user() {
    [[ -z "${USER_PLAIN+x}" ]] && no_user_specified_ || echo "[INFO] Creating user with name: $USER_PLAIN"

    [[ "$(grep "^$USER_PLAIN" /etc/passwd)" ]] \
                            && user_exists_ \
                            || useradd -m -g users -G wheel,storage,power -s /bin/zsh "$USER_PLAIN"
    
    [[ -z "${PASSWORD_PLAIN+x}" ]] && password_manager

    mkdir -pv $MINT_HOME/{Applications,Downloads,Documents,Music,Pictures/{screenshots,Wallpapers},Projects,Videos}
    chown -v "$USER_PLAIN" -R "$MIN_HOME"

    # removed weird sudo command here

    # NOTE: if we delay this, we can get around not having a builduser, then at the end, we just make him root?
    # TODO 
    # make_root "$USER_PLAIN"
}

function initial_configuration() {
    # Create a build and regular user

    [[ -f /var/lib/pacman/db.lck ]] && rm /var/lib/pacman/db.lck  
    # NOTE: removed installation candidates here, moved them to the base_install
    # NOTE: also removed all instances `builduser`, this should now be depricated

    create_user

    echo "[INFO] Installing yay"

    sudo -u "$USER_PLAIN" bash << EOF
    git clone https://aur.archlinux.org/yay-bin.git tmp/yay
    cd /tmp/yay
    makepkg -si --noconfirm
EOF
}

initial_configuration
