#!/usr/bin/env bash

# installer script for Arch Linux (1/4)
# task: setup partitions, internet, and install base packages 
# AUTHOR: Jared Dyreson

LOG_DIR="/root/thin_mint_logs"

[[ ! -d "$LOG_DIR" ]] && mkdir "$LOG_DIR"

exec 1> >(tee "$LOG_DIR/base_install_stdout.log")
exec 2> >(tee "$LOG_DIR/base_install_stderr.log")

# base disk, amount of memory installed, and swap size

TGTDEV="$(lsblk -dplnx size -o name,size | grep -Ev "boot|rpmb|loop" | tail -n 1 | awk '{print $1}')"
MEMORY_INSTALLED="$(awk '/MemTotal/ {$2=$2/(1024^2); print int($2+0.5)}' /proc/meminfo)"

SWAP_SIZE="$(echo "$(($MEMORY_INSTALLED * 2))")"
ROOT_SIZE=40 # FIXME: change to 100 when completed

function partition() {
    local SWAP="$1"
    local ROOT="$2"

    sed -i "s/\[SWAP_SIZE\]/$SWAP/;s/\[ROOT_SIZE\]/$ROOT/" assets/fdisk_script
    sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' assets/fdisk_script | fdisk "${TGTDEV}"
}

function wifi_menu_configuration() {
    WIRELSS_INTERFACE="$(ip link | awk '/mtu/ {print $2}' | cut -d: -f1 | grep "wlp*")"
    systemctl enable netctl-auto@"$WIRELSS_INTERFACE".service
    wifi-menu -o
}

function unmount_all_partitions() {
    umount /mnt/boot
    umount /mnt/home
    umount /mnt/
}

timedatectl set-ntp true

# Partition names


# sub partitions

EFI=""$TGTDEV"1"
SWAP=""$TGTDEV"2"
ROOT=""$TGTDEV"3"
HOME=""$TGTDEV"4"

# drop all partitions but data is still intact

dd if=/dev/zero of="$TGTDEV" bs=512 count=1

# partitioning the drives

partition "$SWAP_SIZE" "$ROOT_SIZE"

# make the EFI partition, swap (enable as well), root and user partitions

mkfs.vfat -F32 "$EFI"
mkswap "$SWAP"
swapon "$SWAP"
mkfs.ext4 "$ROOT"
mkfs.ext4 "$HOME"

# mount and make new partitions

mount --verbose "$ROOT" /mnt
mkdir /mnt/{boot,home}
mount --verbose "$EFI" /mnt/boot
mount --verbose "$HOME" /mnt/home

# internet and check if the script is running inside a VM

[[ "$(grep "hypervisor" /proc/cpuinfo)" || "$(ip link | awk '/mtu/ {print $2}' | cut -d: -f1 | grep "enp*")" ]] && echo "[+] Using builtin internet" || wifi_menu_configuration

# install the bare minimum packages

declare -a essential_packages=(
    "base"
    "base-devel"
    "cryptsetup"
    "device-mapper"
    "e2fsprogs"
    "inetutils"
    "intel-ucode"
    "linux"
    "linux-firmware"
    "man-db"
    "man-pages"
    "networkmanager"
    "s-nail"
    "sysfsutils"
    "usbutils"
    "vim"
)

for package in "${essential_packages[@]}"; do
    pacstrap /mnt "$package"
done

# setup fstab so we know where we can boot from

genfstab -U /mnt >> /mnt/etc/fstab

# we need to lead into the chroot environment from here

cp -v chroot_env /mnt
cp -v assets/startup.nsh /mnt/boot

arch-chroot /mnt ./chroot_env
