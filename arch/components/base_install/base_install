#!/usr/bin/env bash

# installer script for Arch Linux (1/4)
# task: setup partitions, internet, and install base packages 
# AUTHOR: Jared Dyreson

# FIXME: Please uncomment when done

exec 1> >(tee "$LOG_DIR/base_install_stdout.log")
exec 2> >(tee "$LOG_DIR/base_install_stderr.log")

echo "[INFO] BEGIN BASE_INSTALL"

timedatectl set-ntp true


## "Exceptions" ##

function internet_down_() {
    2&> echo "[ERROR] Currently unable to ping Cloudflare, please try again"
    exit 1
}

function asset_not_found() {
    2&> echo  "[ERROR] Could not load asset at path: $1"
    exit 2
}


function obtain_storage() {
    # Find information about the system

    # base disk, amount of memory installed, and swap size

    export TGTDEV="$(lsblk -dplnx size -o name,size | grep -Ev "boot|rpmb|loop" | tail -n 1 | awk '{print $1}')"
    export MEMORY_INSTALLED="$(awk '/MemTotal/ {$2=$2/(1024^2); print int($2+0.5)}' /proc/meminfo)"

    # set the default size to twice the amount of RAM
    [[ -z "${SWAP_SIZE+x}" ]] && export SWAP_SIZE="$(echo "$(($MEMORY_INSTALLED * 2))")"

    # set to the default size of 40 GBs
    [[ -z "${ROOT_PARTITION_SIZE+x}" ]] && export ROOT_PARTITION_SIZE=40 
}


function fdisk_configuration() {
    # Give each partition their amount of space

    local SWAP="$1"
    local ROOT="$2"

    [[ ! -f "assets/fdisk_script" ]] && asset_not_found asset/fdisk_script

    sed -i "s/\[SWAP_SIZE\]/$SWAP/;s/\[ROOT_SIZE\]/$ROOT/" assets/fdisk_script
    sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' assets/fdisk_script | fdisk "${TGTDEV}"
}

function wifi_menu_configuration() {
    # Configure WiFi

    local IF="$1" # aliased to IF -> INTERFACE

    #systemctl enable netctl-auto@"$IF".service
    #wifi-menu -o
    export INTERFACE="$1"
}

function check_internet() {
    # Check if the device is connected to ethernet or wireless
    # Source: https://wiki.archlinux.org/title/Network_configuration/Ethernet#Device_driver
    
    local COUNT="$1"
    export INTERFACE="$(ip addr | awk '/state UP/ {print $2}' | sed 's/.$//')"
    export WIRELESS="$(iw dev | awk '/Interface (.*)/ {print $2}')"

    [[ "$(grep "hypervisor" /proc/cpuinfo))" ]] && (export HYPERVISOR="True"; return)
    
    # Check if default interface is up, if not, check for wireless one
    # If all these fail, then halt the installation

    [[ -z "$INTERFACE" && -z "$WIRELESS" ]] \
                            &&  internet_down_ \
                            || wifi_menu_configuration "$WIRELESS"

    # Check if we can ping Cloudflare and if we can, we have internet access
    [[ "$(ping -I "$INTERFACE" -c $COUNT 1.1.1.1)" ]] \
                                || internet_down_
}

function unmount_all_partitions() {
    umount /mnt/boot
    umount /mnt/home
    umount /mnt/
}


function partition() {
    local EFI=""$TGTDEV"1"
    local SWAP=""$TGTDEV"2"
    local ROOT=""$TGTDEV"3"
    local HOME=""$TGTDEV"4"

    # drop all partitions but data is still intact

    dd if=/dev/zero of="$TGTDEV" bs=512 count=1

    # make the EFI partition, swap (enable as well), root and user partitions

    mkfs.fat  -F 32 -n EFIBOOT          "$EFI"
    mkswap                              "$SWAP"
    swapon                              "$SWAP"
    mkfs.ext4                           "$ROOT"
    mkfs.ext4                           "$HOME"

    # mount and make new partitions


    mount --verbose "$ROOT" /mnt
    mkdir --verbose /mnt/boot
    mount --verbose "$EFI" /mnt/boot
}

function install_pacstrap() {
    # Install the bare minimum packages

    declare -a essential_packages=(
        "base"
        "base-devel"
        "bluez"
        "cryptsetup"
        "device-mapper"
        "dialog"
        "e2fsprogs"
        "git"
        "inetutils"
        "intel-ucode"
        "linux"
        "linux-firmware"
        "man-db"
        "man-pages"
        "networkmanager"
        "python"
        "refind"
        "sudo"
        "sysfsutils"
        "usbutils"
    )

    pacstrap /mnt "${essential_packages[@]}"

}

function copy_dependencies() {
    # We need to shuttle over our dependencies to /mnt , which will be our new root
    mkdir --verbose /mnt/components

    cp -arv ../ /mnt/components

    cp -v assets/startup.nsh /mnt/boot
}

function debug_statement() {
    cat << DEBUG
    ## Information about the current installation script ##

    [TARGET DRIVE]: $TGTDEV
    [ROOT SIZE]: $ROOT_PARTITION_SIZE
    [SWAP SIZE]: $SWAP_SIZE
    [NETWORK INTERFACE]: $INTERFACE
    [VIRTUAL MACHINE]: $HYPERVISOR (blank means not in virtual machine)

    [USER]: $USER_PLAIN
    [PASSWORD]: $PASSWORD_PLAIN
DEBUG

}

function base_install_main() {
    obtain_storage
    # check_internet 5 # FIXME : this seems to be broken using in a VM

    WAYPOINT="$PWD"
    cd "arch/components/base_install"
    fdisk_configuration "$SWAP_SIZE" "$ROOT_PARTITION_SIZE"
    
    partition

    install_pacstrap
    copy_dependencies

    # setup fstab so we know where we can boot from

    cd "$WAYPOINT"

    genfstab -pU /mnt >> /mnt/etc/fstab

    echo "[INFO] END BASE_INSTALL"
}
