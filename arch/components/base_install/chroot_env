#!/usr/bin/env bash

# secondary component to the base installer  (2/4)
# task: run setup inside of the arch-chroot environment
# AUTHOR: Jared Dyreson, CSUF 2021

exec 1> >(tee "chroot_stdout.log")
exec 2> >(tee "chroot_stderr.log")

# timezone

ln -sf /usr/share/zoneinfo/America/Los_Angeles /etc/localtime

# sync the time

hwclock --systohc --utc

# we want English as primary language

echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf

# what is our machine's name to the world

hostname="jared-xps"
echo "$hostname" > /etc/hostname

# make sure this name is reflected in our network configuration

echo -e "127.0.0.1\t\tlocalhost" >> /etc/hosts
echo -e "::1\t\tlocalhost" >> /etc/hosts
echo -e "127.0.0.1\t\t"$hostname".localdomain" >> /etc/hosts

# internet persistence

systemctl enable NetworkManager

# installing the bootloader

pacman -Sy --noconfirm grub efibootmgr dosfstools os-prober mtools

# EFI bootloader

grub-install --target=x86_64-efi --bootloader-id=grub --efi-directory=/boot
grub-mkconfig -o /boot/grub/grub.cfg

# compile the kernel

mkinitcpio -p linux

# just incase if you find yourself getting dropped into a UEFI shell for some reason, this should clear it up
# SOURCE : https://www.linuxbabe.com/virtualbox/install-arch-linux-uefi-hardware-virtualbox

echo "bcfg boot add 1 fs0:/EFI/grub/grubx64.efi \"Added via script\"" >> /boot/startup.sh
echo "exit" >> /boot/startup.sh
mkdir /boot/EFI/BOOT
cp -arv /boot/EFI/grub/grubx64.efi /boot/EFI/BOOT/BOOTX86.EFI
