#!/usr/bin/env bash

# secondary component to the base installer  (2/4)
# task: run setup inside of the arch-chroot environment
# AUTHOR: Jared Dyreson

LOG_DIR="/root/thin_mint_logs"

[[ ! -d "$LOG_DIR" ]] && mkdir "$LOG_DIR"

exec 1> >(tee "$LOG_DIR/chroot_stdout.log")
exec 2> >(tee "$LOG_DIR/chroot_stderr.log")

function hostname_configuration() {
    local HOST="$1"

    sed "s/\[HOSTNAME\]/$HOST/" assets/host > /etc/hosts
}

# timezone

ln -sf /usr/share/zoneinfo/America/Los_Angeles /etc/localtime

# sync the time

hwclock --systohc --utc

# we want English as primary language

echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf

# what is our machine's name to the world

HOSTNAME="jared-xps"
echo "$HOSTNAME" > /etc/hostname

# make sure this name is reflected in our network configuration

hostname_configuration "$HOSTNAME"

# internet persistence

systemctl enable NetworkManager

# installing the bootloader

declare -a bootloader_components=(
    "dosfstools"
    "efibootmgr"
    "grub"
    "mtools"
    "os-prober"
)

# update the cache and upgrade all components thus far
pacman -Syu

for component in "${bootloader_components[@]}"; do
    pacman -S --noconfirm "$component"
done

# EFI bootloader

grub-install --target=x86_64-efi --bootloader-id=grub --efi-directory=/boot
grub-mkconfig -o /boot/grub/grub.cfg

# compile the kernel

mkinitcpio -p linux

: <<'END_COMMENT'
Just incase if you find yourself getting dropped into a UEFI shell for some reason, this should clear it up

SOURCE : https://www.linuxbabe.com/virtualbox/install-arch-linux-uefi-hardware-virtualbox
END_COMMENT

cp assets/startup.nsh /boot
mkdir /boot/EFI/BOOT
cp -arv /boot/EFI/grub/grubx64.efi /boot/EFI/BOOT/BOOTX86.EFI
